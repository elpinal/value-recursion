type mode = Mode.t

module Env :> {
  type t

  val empty : t
  val insert : t -> var -> mode -> t
  val lookup : t -> var -> option mode
  val delete : t -> var -> t

  val overlap : t -> t -> t

  val compose_mode : mode -> t -> t

  val separate : t -> list var -> t * t

  val equal : t -> t -> bool

  val fold_left 'a : (var -> 'a -> mode -> 'a) -> 'a -> t -> 'a

  val show : t -> string
} = {
  module M = VarMap

  type t = M.t mode

  val empty = M.empty

  val insert env v m = M.insert v m env

  val lookup env v = M.lookup v env

  val delete env v = M.delete v env

  val overlap env1 env2 =
    let val f v acc m2 =
      insert acc v $
        match M.lookup v env1 with
          | Some m1 -> Mode.max m1 m2
          | None    -> m2
        end
    in
    M.fold_left f env1 env2

  val compose_mode m env = M.map (Mode.compose m) env

  val separate env vs =
    List.fold_left
    (fun (acc, new) v ->
    match M.lookup v acc with
      | None   -> (acc, new)
      | Some x -> (M.delete v acc, M.insert v x new)
    end)
    (env, empty) vs

  val equal1 x y =
    M.fold_left (fun v acc m ->
      Bool.r#and acc $
      match M.lookup v y with
        | None    -> Mode.`==` m Mode.Ignore
        | Some m' -> Mode.`==` m m'
      end
    )
    true
    x

  val equal2 x y =
    M.fold_left (fun v acc m' ->
      Bool.r#and acc $
      match M.lookup v x with
        | None   -> Mode.`==` m' Mode.Ignore
        | Some _ -> true
      end
    )
    true
    y

  // Up to `Ignore`.
  val equal x y =
    if equal1 x y
    then equal2 x y
    else false

  val fold_left = M.fold_left

  open {
    val rec show_list ys =
      open Pretty in
      match ys with
        | []      -> ""
        | x :: [] -> x
        | x :: xs -> x <> "," <+> show_list xs
      end
  }

  val show env =
    open Pretty in
    show_list $
    List.map (fun (x, y) -> x <> ":" <> y) $
    M.to_list $
    M.map Mode.show env
}

type env = Env.t
